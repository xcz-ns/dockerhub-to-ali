name: Docker 镜像推送（临时）

on:
  push:
    branches:
      - '**'  # 监听所有分支的 push
    paths:
      - 'images_tmp.txt'  # 只有 images_tmp.txt 文件变更才触发
  workflow_dispatch:  # 仍然允许手动触发

env:
  IMAGE_LIST_FILE: "images_tmp.txt"  # ✅ 定义镜像列表文件名
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  TG_BOT_TOKEN: "${{ secrets.TG_BOT_TOKEN }}"
  TG_CHAT_ID: "${{ secrets.TG_CHAT_ID }}"

jobs:
  build:
    name: 拉取镜像并推送至阿里云
    runs-on: ubuntu-latest
    steps:
    - name: 初始化时间与日志
      run: |
        echo "start_time=$(date +%s)" >> $GITHUB_ENV
        > new_images_success.log
        > new_images_failed.log

    - name: 清理磁盘空间前的状态
      run: df -hT

    - name: 最大化构建空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: 重启 Docker 服务
      run: sudo service docker restart

    - name: 获取代码
      uses: actions/checkout@v4

    - name: 配置 Buildx
      uses: docker/setup-buildx-action@v3

    - name: 构建并推送镜像到阿里云
      run: |
        set +e  # 遇到错误不中断整个脚本

        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

        declare -A duplicate_images
        declare -A temp_map

        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^\s*# ]] && continue
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            name_space="${name_space}_"
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            if [[ -n "${temp_map[$image_name]}" ]]; then
                if [[ "${temp_map[$image_name]}" != $name_space ]]; then
                    duplicate_images[$image_name]="true"
                fi
            else
                temp_map[$image_name]=$name_space
            fi
        done < "$IMAGE_LIST_FILE"

        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^\s*# ]] && continue

            docker pull $line || { echo "$line" >> new_images_failed.log; continue; }

            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            platform_prefix=""
            [[ -n "$platform" ]] && platform_prefix="${platform//\//_}_"

            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" && -n "$name_space" ]]; then
              name_space_prefix="${name_space}_"
            fi

            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            docker tag "$image" "$new_image" || { echo "$image" >> new_images_failed.log; continue; }

            if docker push "$new_image"; then
              echo "$new_image" >> new_images_success.log
            else
              echo "$image" >> new_images_failed.log
              docker rmi "$image" "$new_image" || true
              continue
            fi

            docker rmi "$image" "$new_image" || true

        done < "$IMAGE_LIST_FILE"

    - name: 发送构建状态和镜像列表到 Telegram
      if: always()
      run: |
        end_time=$(date +%s)
        duration_sec=$(( end_time - start_time ))
        duration_min=$(( duration_sec / 60 ))
        duration_rem=$(( duration_sec % 60 ))
        DURATION="${duration_min}分${duration_rem}秒"
        STATUS="${{ job.status }}"

        MSG="🧱 *Docker Image Pusher任务*\n"
        MSG+="⏱️ 耗时：$DURATION\n"
        MSG+="📅 时间：$(TZ='Asia/Shanghai' date "+%Y-%m-%d %H:%M:%S")\n"
        MSG+="✅ 状态：$STATUS\n\n"

        if [ -s new_images_success.log ]; then
          MSG+="📦 *成功推送到阿里云的镜像：*\n"
          while read -r line; do
            MSG+="- \`$line\`\n"  # ✅ 使用反引号包裹，使其变为可复制的文本
          done < new_images_success.log
        fi

        if [ -s new_images_failed.log ]; then
          MSG+="\n🚫 *推送失败的镜像：*\n"
          while read -r line; do
            MSG+="- \`$line\`\n"  # ✅ 使用反引号包裹，使其变为可复制的文本
          done < new_images_failed.log
        fi

        # ✅ 使用修正后的 curl 命令确保换行正确
        curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
          -d chat_id="$TG_CHAT_ID" \
          -d parse_mode=Markdown \
          --data-urlencode "text=$(printf '%b' "${MSG}")"